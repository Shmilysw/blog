(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{506:function(t,a,e){"use strict";e.r(a);var s=e(1),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"git-github入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-github入门"}},[t._v("#")]),t._v(" git-github 入门")]),t._v(" "),e("h3",{attrs:{id:"_1-git介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git介绍"}},[t._v("#")]),t._v(" 1. git 介绍")]),t._v(" "),e("p",[t._v("工作区：仓库的目录。工作区是独立于各个分支的。"),e("br"),t._v("\n暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。"),e("br"),t._v("\n版本库：存放所有已经提交到本地仓库的代码版本"),e("br"),t._v("\n版本结构：树结构 (倒着的有向树)，树中每个节点代表一个代码版本，树中有 "),e("code",[t._v("head")]),t._v("  位置，表示你当前操作的位置。")]),t._v(" "),e("p",[t._v("工作区 ------\x3e 暂存区 (桥梁) ------\x3e 版本库")]),t._v(" "),e("h3",{attrs:{id:"_2-演示ssh连接github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-演示ssh连接github"}},[t._v("#")]),t._v(" 2. 演示 ssh 连接 github")]),t._v(" "),e("p",[t._v("（1）创建 SSHkey"),e("br"),t._v("\n 打开 "),e("code",[t._v("Git Bash")]),t._v(" ，输入 "),e("code",[t._v("ssh-keygen -t rsa")]),t._v(" "),e("br"),t._v("\n 会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以"),e("br"),t._v("\n在  "),e("code",[t._v("C:\\Users\\“你的用户名”.ssh")]),t._v("  目录下就会有.pub 结尾的文件，用记事本打开，复制里面的东西，这就是你的 SSH key"),e("br"),t._v("\n（2）添加 key 到 github"),e("br"),t._v("\ngithub-> 设置 ->SSH 公钥"),e("br"),t._v("\n把 key 粘贴进去，标题默认是本机的名字")]),t._v(" "),e("p",[t._v("（3）验证是否连接成功")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("ssh -T git@github.com\nHi Shmilysw! You've successfully authenticated, but GitHub does not provide shell access. // 说明成功了\n")])])]),e("h3",{attrs:{id:"_3-演示git的基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-演示git的基本操作"}},[t._v("#")]),t._v(" 3. 演示 git 的基本操作")]),t._v(" "),e("h4",{attrs:{id:"创建项目-提交上传项目-拉取项目-添加删除用户分支-等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建项目-提交上传项目-拉取项目-添加删除用户分支-等"}},[t._v("#")]),t._v(" （创建项目，提交上传项目，拉取项目，添加删除用户分支，等）")]),t._v(" "),e("p",[t._v("（1）添加用户名和邮箱")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("git config --global user.name shiwei\ngit config --global user.email 1828045443@qq.com\n\n// 查看：\ncat .gitconfig\n[user]\n      name = shiwei\n      email = 1828045443@qq.com\n")])])]),e("p",[t._v("（2）创建空的项目（初始化仓库，将本地仓库和 github 仓库关联，将分支也关联）")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("git init\ngit remote add origin git@github.com:Shmilysw/Learning.git // ssh\ngit pull --rebase origin master // 即可跟刚创建的线上远程仓库的默认分支master关联\ngit push -u origin master // 推送到github仓库\n")])])]),e("p",[t._v("（3）添加文件到仓库，并查看仓库状态，将修改的文件添加到暂存区内，提交版本")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v('vim readme.txt\ngit status    // 查看仓库状态 \ngit add 文件名 // git add . （全部加到暂存区）\ngit commit -m "add readme.txt"\n')])])]),e("p",[t._v("（4）在暂存区里删除内容（将文件从暂存区里拿出来，但是还是具有管理权），并对比仓库里的内容")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("git restore --stage readme.txt\ngit diff readme.txt\n")])])]),e("p",[t._v("（5）查看当前当前节点之前的路径，版本的回退")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("git log \ngit reset --hard 版本名前五个字符\n")])])]),e("p",[t._v("（6）创建分支（协同开发），切换分支，查看分支，合并分支，删除分支")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("git checkout -b branch_name // 创建并切换到branch_name(dev)这个分支\ngit branch                  // 查看所有分支和当前所处分支\ngit checkout branch_name    // 切换到branch_name这个分支\ngit merge branch_name       // 将分支branch_name合并到当前分支上\ngit branch -d branch_name   // 删除本地仓库的branch_name分支\n")])])]),e("p",[t._v("（7）将当前分支推送到远程仓库")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("git push --set-upstream origin master // 第一次push的时候\ngit push -u // (第一次需要-u以后不需要)：将当前分支推送到远程仓库\n")])])]),e("p",[t._v("（8）拉去项目到本地")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("git clone git@github.com:Shmilysw/Learning.git // ssh \n")])])]),e("h3",{attrs:{id:"_4-git的使用技巧-遇到的错误"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-git的使用技巧-遇到的错误"}},[t._v("#")]),t._v(" 4. git 的使用技巧（遇到的错误）")]),t._v(" "),e("ul",[e("li",[t._v("如果 "),e("code",[t._v("push")]),t._v("  时提示错误信息，eg")])]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("$ git push -u origin master\nTo https://github.com/xxxxx/xxxxx.git\n! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/xxxxx/xxxxx.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n")])])]),e("ul",[e("li",[t._v("问题原因"),e("br"),t._v("\n git 仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。")]),t._v(" "),e("li",[t._v("解决方案")])]),t._v(" "),e("ol",[e("li",[t._v("强制推送，会覆盖之前的版本，所以建议谨慎使用！")])]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("// 添加使用 -f 强制推送 git push -f\n// 强推送到远端 master 分支\ngit push -f --set-upstream origin master\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("同步（未使用过）")])]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("//把远程仓库和本地同步，消除差异\ngit pull origin master --allow-unrelated-histories \n// 重新 add 和 commit 相应文件\ngit push origin master\n// 此时就能应该上传成功了\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("合并（未使用过）")])]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v('// 先把 git 的东西 fetch 到你本地然后 merge 后再 push \ngit fetch\ngit merge\n// 在使用的时候，git merge，又出现了以下的问题\n// xu:QProj xiaokai$ git merge\n// fatal: refusing to merge unrelated histories\n// 使用 git pull origin master --allow-unrelated-histories 处理一下\n// 继续执行 git merge\n// 如果提示，说明没问题！\n// fatal: You have not concluded your merge (MERGE_HEAD exists).\n// Please, commit your changes before you merge\ngit add .\ngit commit -m "提交信息"\ngit merge\n// 然后输入git pull，显示如下\n// Already up-to-date.\n// 最后推到远端仓库\ngit push origin master\n')])])]),e("ul",[e("li",[t._v("总结：不要乱删 .git 文件，如果是 git clone 下来的，就使用原本的 .git 文件，不要乱移动其位置！")])]),t._v(" "),e("h3",{attrs:{id:"_5-github的基本介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-github的基本介绍"}},[t._v("#")]),t._v(" 5. github 的基本介绍")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("代码托管平台\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);